{"version":3,"sources":["Components/card-list/Card/card.component.js","Components/card-list/card-list.component.js","search-box/searchComponent.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","mons","id","alt","name","email","Cardlist","obj","map","key","SearchModify","placeholder","handleChange","type","onChange","App","e","setState","Searchinput","target","value","state","fetch","then","response","json","users","this","monsFilters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iTAceA,G,YAXH,SAAAC,GAAK,OACjB,yBAAKC,UAAU,mBACf,yBAAKC,IAAG,+BAA0BF,EAAMG,KAAKC,GAArC,0BAAiEC,IAAI,aAC3E,4BACML,EAAMG,KAAKG,MAEnB,2BAAIN,EAAMG,KAAKI,UCOAC,EAZC,SAAAR,GAAK,OAEpB,yBAAKC,UAAU,aAGdD,EAAMS,IAAIC,KAAI,SAAAP,GAAI,OAClB,kBAAC,EAAD,CAAMQ,IAAKR,EAAKC,GAAID,KAAMA,SCCbS,G,MATM,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OAErB,2BAAOC,KAAK,SACZd,UAAW,SACXY,YAAaA,EACbG,SAAUF,MC+BKG,G,wDAhCb,aAAc,IAAD,8BACX,gBAWFH,aAAe,SAAAI,GACf,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAXnC,EAAKC,MAAM,CACTd,IAAI,GACJW,YAAY,IAJH,E,gEAOO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACV,IAAImB,S,+BAM3B,IAAD,EACmBC,KAAKN,MAAvBd,EADD,EACCA,IAAIW,EADL,EACKA,YACLU,EAAarB,EAAIsB,QAAO,SAAA5B,GAAI,OAAGA,EAAKG,KAAK0B,cAAcC,SAASb,EAAYY,kBACpF,OAEE,yBAAK/B,UAAU,QACd,8CACC,kBAAC,EAAD,CACCY,YAAY,iBACZC,aAAce,KAAKf,eAEpB,kBAAC,EAAD,CAAUL,IAAKqB,S,GA5BHI,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f2f4fb83.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"./card.styles.css\";\r\n\r\nconst Card= props =>(\r\n<div className=\"card-container \">\r\n<img src={`https://robohash.org/${props.mons.id}?set=set2&size=180x180`} alt=\"Monsters\" />\r\n  <h2>\r\n      { props.mons.name }\r\n</h2>\r\n<p>{props.mons.email}</p>\r\n</div>\r\n\r\n\r\n);\r\nexport default Card;","import React from \"react\";\r\nimport \"./card-list.styles.css\";\r\nimport Card from \"./Card/card.component\";\r\n\r\nconst Cardlist= props => (\r\n\r\n <div className=\"card-list\">\r\n     \r\n{\r\n  props.obj.map(mons =>(\r\n  <Card key={mons.id} mons={mons} />\r\n  ))\r\n}\r\n</div>\r\n);\r\n\r\nexport default Cardlist;\r\n","import React from \"react\";\r\n import \"./search-box.styles.css\";\r\nconst SearchModify = ({placeholder,handleChange}) => (\r\n \r\n<input type=\"search\"  \r\nclassName =\"search\"\r\nplaceholder={placeholder}\r\nonChange={handleChange}></input>\r\n\r\n);\r\n\r\nexport default SearchModify;","import React,{Component} from 'react';\nimport Cardlist from \"./Components/card-list/card-list.component\";\nimport SearchModify from \"./search-box/searchComponent\";\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state={\n      obj:[ ],\n      Searchinput:''\n      }\n  }\n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(users => this.setState({obj:users}));\n  }\n  handleChange = e=>{ \n  this.setState({Searchinput: e.target.value})\n\n  }\n  render(){\n    const {obj,Searchinput}= this.state;\n    const monsFilters= obj.filter(mons=> mons.name.toLowerCase().includes(Searchinput.toLowerCase()));\n  return (\n    \n    <div className=\"App \">\n     <h1>Monster Roldex</h1>\n      <SearchModify\n       placeholder=\"Search monster\"\n       handleChange={this.handleChange}\n      />\n      <Cardlist obj={monsFilters}  />\n    </div>\n  );\n}}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}